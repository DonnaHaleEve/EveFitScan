using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text;
using Npgsql;

namespace DBConverter
{
    partial class Program
    {
        static void PrintShipsHeader(StreamWriter fileShips) {
            fileShips.WriteLine("// =======================================================================");
            fileShips.WriteLine("// == AUTOGENERATED FILE =================================================");
            fileShips.WriteLine("// =======================================================================");
            fileShips.WriteLine("");
            fileShips.WriteLine("using System;");
            fileShips.WriteLine("using System.Collections.Generic;");
            fileShips.WriteLine("");
            fileShips.WriteLine("namespace EveFitScanUI");
            fileShips.WriteLine("{");
            fileShips.WriteLine("  partial class ShipModel");
            fileShips.WriteLine("  {");
            fileShips.WriteLine("    public class ShipDescription {");
            fileShips.WriteLine("      public ShipDescription( string Name, int TypeID, uint HighSlots, uint MedSlots, uint LowSlots, uint RigSlots, uint SubsystemSlots,");
            fileShips.WriteLine("        float ShieldHP, float ShieldHPMultiplier, float ShieldResistEM, float ShieldResistThermal, float ShieldResistKinetic, float ShieldResistExplosive,");
            fileShips.WriteLine("        float ArmorHP, float ArmorHPMultiplier, float ArmorResistEM, float ArmorResistThermal, float ArmorResistKinetic, float ArmorResistExplosive,");
            fileShips.WriteLine("        float HullHP, float HullHPMultiplier, float HullResistEM, float HullResistThermal, float HullResistKinetic, float HullResistExplosive,");
            fileShips.WriteLine("        float OverheatingBonus");
            fileShips.WriteLine("      ) {");
            fileShips.WriteLine("        m_Name = Name;");
            fileShips.WriteLine("        m_TypeID = TypeID;");
            fileShips.WriteLine("        m_HighSlots = HighSlots;");
            fileShips.WriteLine("        m_MedSlots = MedSlots;");
            fileShips.WriteLine("        m_LowSlots = LowSlots;");
            fileShips.WriteLine("        m_RigSlots = RigSlots;");
            fileShips.WriteLine("        m_SubsystemSlots = SubsystemSlots;");
            fileShips.WriteLine("        m_ShieldHP = ShieldHP;");
            fileShips.WriteLine("        m_ShieldHPMultiplier = ShieldHPMultiplier;");
            fileShips.WriteLine("        m_ShieldResistEM = ShieldResistEM;");
            fileShips.WriteLine("        m_ShieldResistThermal = ShieldResistThermal;");
            fileShips.WriteLine("        m_ShieldResistKinetic = ShieldResistKinetic;");
            fileShips.WriteLine("        m_ShieldResistExplosive = ShieldResistExplosive;");
            fileShips.WriteLine("        m_ArmorHP = ArmorHP;");
            fileShips.WriteLine("        m_ArmorHPMultiplier = ArmorHPMultiplier;");
            fileShips.WriteLine("        m_ArmorResistEM = ArmorResistEM;");
            fileShips.WriteLine("        m_ArmorResistThermal = ArmorResistThermal;");
            fileShips.WriteLine("        m_ArmorResistKinetic = ArmorResistKinetic;");
            fileShips.WriteLine("        m_ArmorResistExplosive = ArmorResistExplosive;");
            fileShips.WriteLine("        m_HullHP = HullHP;");
            fileShips.WriteLine("        m_HullHPMultiplier = HullHPMultiplier;");
            fileShips.WriteLine("        m_HullResistEM = HullResistEM;");
            fileShips.WriteLine("        m_HullResistThermal = HullResistThermal;");
            fileShips.WriteLine("        m_HullResistKinetic = HullResistKinetic;");
            fileShips.WriteLine("        m_HullResistExplosive = HullResistExplosive;");
            fileShips.WriteLine("        m_OverheatingBonus = OverheatingBonus;");
            fileShips.WriteLine("      }");
            fileShips.WriteLine("      public string m_Name;");
            fileShips.WriteLine("      public int m_TypeID;");
            fileShips.WriteLine("      public uint m_HighSlots;");
            fileShips.WriteLine("      public uint m_MedSlots;");
            fileShips.WriteLine("      public uint m_LowSlots;");
            fileShips.WriteLine("      public uint m_RigSlots;");
            fileShips.WriteLine("      public uint m_SubsystemSlots;");
            fileShips.WriteLine("      public float m_ShieldHP;");
            fileShips.WriteLine("      public float m_ShieldHPMultiplier;");
            fileShips.WriteLine("      public float m_ShieldResistEM;");
            fileShips.WriteLine("      public float m_ShieldResistThermal;");
            fileShips.WriteLine("      public float m_ShieldResistKinetic;");
            fileShips.WriteLine("      public float m_ShieldResistExplosive;");
            fileShips.WriteLine("      public float m_ArmorHP;");
            fileShips.WriteLine("      public float m_ArmorHPMultiplier;");
            fileShips.WriteLine("      public float m_ArmorResistEM;");
            fileShips.WriteLine("      public float m_ArmorResistThermal;");
            fileShips.WriteLine("      public float m_ArmorResistKinetic;");
            fileShips.WriteLine("      public float m_ArmorResistExplosive;");
            fileShips.WriteLine("      public float m_HullHP;");
            fileShips.WriteLine("      public float m_HullHPMultiplier;");
            fileShips.WriteLine("      public float m_HullResistEM;");
            fileShips.WriteLine("      public float m_HullResistThermal;");
            fileShips.WriteLine("      public float m_HullResistKinetic;");
            fileShips.WriteLine("      public float m_HullResistExplosive;");
            fileShips.WriteLine("      public float m_OverheatingBonus;");
            fileShips.WriteLine("    }");
            fileShips.WriteLine("");
            fileShips.WriteLine("    private List<ShipDescription> m_ShipDescriptions = null;");
            fileShips.WriteLine("");
            fileShips.WriteLine("    public IReadOnlyList<ShipDescription> ShipDescriptions {");
            fileShips.WriteLine("      get {");
            fileShips.WriteLine("        if (m_ShipDescriptions == null) {");
            fileShips.WriteLine("          m_ShipDescriptions = new List<ShipDescription>();");
        }

        static void PrintShipsFooter(StreamWriter fileShips) {
            fileShips.WriteLine("        }");
            fileShips.WriteLine("        return m_ShipDescriptions;");
            fileShips.WriteLine("      }");
            fileShips.WriteLine("    }");
            fileShips.WriteLine("  }");
            fileShips.WriteLine("}");
        }


        static IReadOnlyCollection<ShipDescription> GetShipDescriptions(IReadOnlyCollection<Tuple<string, int>> shipNames, NpgsqlConnection conn) {
            List<ShipDescription> shipDescriptions = new List<ShipDescription>();

            foreach (Tuple<string, int> ship in shipNames) {
                shipDescriptions.Add(GetShipDescription(ship.Item1, ship.Item2, conn));
            }

            return shipDescriptions;
        }

        static ShipDescription GetShipDescription(string shipName, int typeID, NpgsqlConnection conn) {
            IReadOnlyDictionary<SHIP_ATTRIBUTES, float> shipAttributes = GetShipAttributes(typeID, conn);

            IReadOnlyDictionary<SHIP_TRAITS, float> shipTraits = GetShipTraits(typeID, conn);

            Debug.Assert(!(shipTraits.ContainsKey(SHIP_TRAITS.SHIP_TRAIT_SHIELD_RESISTS_PER_LEVEL) && shipTraits.ContainsKey(SHIP_TRAITS.SHIP_TRAIT_SHIELD_RESISTS_ROLE)));
            float traitShieldResonance = 1.0f;
            float traitShieldResists = 0.0f;
            if (shipTraits.TryGetValue(SHIP_TRAITS.SHIP_TRAIT_SHIELD_RESISTS_PER_LEVEL, out traitShieldResists)) {
                traitShieldResonance = 1.0f - traitShieldResists * 5.0f * 0.01f; // 5 levels, percent value
            }
            else if (shipTraits.TryGetValue(SHIP_TRAITS.SHIP_TRAIT_SHIELD_RESISTS_ROLE, out traitShieldResists)) {
                traitShieldResonance = 1.0f - traitShieldResists * 0.01f; // role bonus, percent value
            }

            Debug.Assert(!(shipTraits.ContainsKey(SHIP_TRAITS.SHIP_TRAIT_ARMOR_RESISTS_PER_LEVEL) && shipTraits.ContainsKey(SHIP_TRAITS.SHIP_TRAIT_ARMOR_RESISTS_ROLE)));
            float traitArmorResonance = 1.0f;
            float traitArmorResists = 0.0f;
            if (shipTraits.TryGetValue(SHIP_TRAITS.SHIP_TRAIT_ARMOR_RESISTS_PER_LEVEL, out traitArmorResists)) {
                traitArmorResonance = 1.0f - traitArmorResists * 5.0f * 0.01f; // 5 levels, percent value
            }
            else if (shipTraits.TryGetValue(SHIP_TRAITS.SHIP_TRAIT_ARMOR_RESISTS_ROLE, out traitArmorResists)) {
                traitArmorResonance = 1.0f - traitArmorResists * 0.01f; // role bonus, percent value
            }

            float traitShieldHP = 0.0f;
            if (!shipTraits.TryGetValue(SHIP_TRAITS.SHIP_TRAIT_SHIELD_HP_PERCENT_PER_LEVEL, out traitShieldHP)) {
                traitShieldHP = 0.0f;
            }
            float traitShieldHPMultiplier = 1.0f + traitShieldHP * 5.0f * 0.01f; // 5 levels, percent value

            float traitArmorHP = 0.0f;
            if (!shipTraits.TryGetValue(SHIP_TRAITS.SHIP_TRAIT_ARMOR_HP_PERCENT_PER_LEVEL, out traitArmorHP)) {
                traitArmorHP = 0.0f;
            }
            float traitArmorHPMultiplier = 1.0f + traitArmorHP * 5.0f * 0.01f; // 5 levels, percent value

            float traitHullHP = 0.0f;
            if (!shipTraits.TryGetValue(SHIP_TRAITS.SHIP_TRAIT_HULL_HP_PERCENT_PER_LEVEL, out traitHullHP)) {
                traitHullHP = 0.0f;
            }
            float traitHullHPMultiplier = 1.0f + traitHullHP * 5.0f * 0.01f; // 5 levels, percent value

            float traitOverheatingBonusPercent = 0.0f;
            if (!shipTraits.TryGetValue(SHIP_TRAITS.SHIP_TRAIT_OVERHEATING_BONUS_PERCENT, out traitOverheatingBonusPercent)) {
                traitOverheatingBonusPercent = 0.0f;
            }
            float traitOverheatingBonus = traitOverheatingBonusPercent * 0.01f; // percent value

            float TechLevel = -1;
            float SubsystemHoldCapacity = -1;
            uint SubsystemSlots = 0;
            if (shipAttributes.TryGetValue(SHIP_ATTRIBUTES.SHIP_ATTR_TECH_LEVEL, out TechLevel) && shipAttributes.TryGetValue(SHIP_ATTRIBUTES.SHIP_ATTR_SUBSYSTEM_HOLD_CAPACITY, out SubsystemHoldCapacity)) {
                if (TechLevel == 3.0f && SubsystemHoldCapacity > 0.0f) {
                    SubsystemSlots = 4;
                }
            }

            return new ShipDescription(
                shipName,
                typeID,
                (uint)(shipAttributes[SHIP_ATTRIBUTES.SHIP_ATTR_HIGH_SLOTS]),
                (uint)(shipAttributes[SHIP_ATTRIBUTES.SHIP_ATTR_MED_SLOTS]),
                (uint)(shipAttributes[SHIP_ATTRIBUTES.SHIP_ATTR_LOW_SLOTS]),
                (uint)(shipAttributes[SHIP_ATTRIBUTES.SHIP_ATTR_RIG_SLOTS]),
                SubsystemSlots,
                shipAttributes[SHIP_ATTRIBUTES.SHIP_ATTR_SHIELD_HP],
                traitShieldHPMultiplier,
                1.0f - shipAttributes[SHIP_ATTRIBUTES.SHIP_ATTR_SHIELD_EM_RESONANCE] * traitShieldResonance,
                1.0f - shipAttributes[SHIP_ATTRIBUTES.SHIP_ATTR_SHIELD_THERM_RESONANCE] * traitShieldResonance,
                1.0f - shipAttributes[SHIP_ATTRIBUTES.SHIP_ATTR_SHIELD_KIN_RESONANCE] * traitShieldResonance,
                1.0f - shipAttributes[SHIP_ATTRIBUTES.SHIP_ATTR_SHIELD_EXPL_RESONANCE] * traitShieldResonance,
                shipAttributes[SHIP_ATTRIBUTES.SHIP_ATTR_ARMOR_HP],
                traitArmorHPMultiplier,
                1.0f - shipAttributes[SHIP_ATTRIBUTES.SHIP_ATTR_ARMOR_EM_RESONANCE] * traitArmorResonance,
                1.0f - shipAttributes[SHIP_ATTRIBUTES.SHIP_ATTR_ARMOR_THERM_RESONANCE] * traitArmorResonance,
                1.0f - shipAttributes[SHIP_ATTRIBUTES.SHIP_ATTR_ARMOR_KIN_RESONANCE] * traitArmorResonance,
                1.0f - shipAttributes[SHIP_ATTRIBUTES.SHIP_ATTR_ARMOR_EXPL_RESONANCE] * traitArmorResonance,
                shipAttributes[SHIP_ATTRIBUTES.SHIP_ATTR_HULL_HP],
                traitHullHPMultiplier,
                1.0f - shipAttributes[SHIP_ATTRIBUTES.SHIP_ATTR_HULL_EM_RESONANCE],
                1.0f - shipAttributes[SHIP_ATTRIBUTES.SHIP_ATTR_HULL_THERM_RESONANCE],
                1.0f - shipAttributes[SHIP_ATTRIBUTES.SHIP_ATTR_HULL_KIN_RESONANCE],
                1.0f - shipAttributes[SHIP_ATTRIBUTES.SHIP_ATTR_HULL_EXPL_RESONANCE],
                traitOverheatingBonus
            );
        }
    }
}